{"version":3,"file":"main.fe39a9c8d219cfc78739.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAUA;AASA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3BA;AAAA;AAAA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAAA;AAAA;AAuCA;AACA;AAxCA;AAAA;AAAA;AA2CA;AACA;AA5CA;AAAA;AAAA;AA+CA;AACA;AAhDA;AAAA;AAAA;AAmDA;AACA;AApDA;AAAA;AAAA;AAuDA;AACA;AAxDA;AA2DA;AACA;AA5DA;AAAA;AAAA;AA+DA;AACA;AAhEA;AAmEA;AACA;AApEA;AAAA;AAAA;AAuEA;AACA;AAxEA;AA2EA;AACA;AA5EA;AAAA;AAAA;AA+EA;AACA;AAhFA;AAAA;AAAA;AAmFA;AACA;AApFA;AAAA;AAAA;AAuFA;AACA;AAxFA;AAAA;AAAA;AA2FA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAhGA;AAAA;AAAA;AAmGA;AACA;AApGA;AAAA;AAAA;AAuGA;AACA;AAxGA;AAAA;AAAA;AA2GA;AACA;AACA;AAEA;AACA;AAhHA;;AAAA;AAAA","sources":["webpack://@pinpoint-fe/scatter-chart/./src/ui/Layer.ts"],"sourcesContent":["import { LAYER_DEFAULT_PRIORITY } from \"../constants/ui\";\nimport { Coord } from \"../types\";\nimport { getDevicePicelRatio } from \"../utils/helper\";\n\nexport interface LayerProps {\n  width?: number;\n  height?: number;\n  display?: boolean;\n  fixed?: boolean;\n  priority?: number;\n}\n\nexport class Layer {\n  private cvs: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private identifier: string = '';\n  private display;\n  private fixed;\n  private priorityOrder;\n  private displayPixcelRatio;\n\n  constructor({\n     width = 0,\n     height = 0,\n     display = true,\n     fixed = false,\n     priority = LAYER_DEFAULT_PRIORITY,\n  }: LayerProps = {}) {\n    this.displayPixcelRatio = getDevicePicelRatio();\n    this.display = display;\n    this.fixed = fixed;\n    this.priorityOrder = priority;\n    this.cvs = document.createElement('canvas');\n    this.ctx = this.cvs.getContext('2d')!;\n    this.cvs.style.width = `${width}px`;\n    this.cvs.style.height = `${height}px`;\n    this.cvs.width = width * this.dpr;\n    this.cvs.height = height * this.dpr;\n    this.ctx.scale(this.dpr, this.dpr);\n  }\n\n  public setSize(width: number, height: number) {\n    this.clear();\n    this.cvs.style.width = `${width}px`;\n    this.cvs.style.height = `${height}px`;\n    this.cvs.width = width * this.dpr;\n    this.cvs.height = height * this.dpr;\n    this.ctx.scale(this.dpr, this.dpr);\n  }\n\n  public show() {\n    this.display = true;\n  }\n\n  public hide() {\n    this.display = false;\n  }\n\n  public clear() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  get dpr() {\n    return this.displayPixcelRatio;\n  }\n\n  get priority() {\n    return this.priorityOrder;\n  }\n\n  set priority(priority: number) {\n    this.priorityOrder = priority;\n  }\n\n  get id() {\n    return this.identifier;\n  }\n\n  set id(id: string) {\n    this.identifier = id;\n  }\n\n  get isFixed() {\n    return this.fixed;\n  }\n\n  set isFixed(fixed: boolean) {\n    this.fixed = fixed;\n  }\n\n  get canvas() {\n    return this.cvs; \n  }\n\n  get context() {\n    return this.ctx;\n  }\n\n  get isDisplay() {\n    return this.display;\n  }\n\n  public swapCanvasImage() {\n    const width = this.canvas.width / this.dpr;\n    const height = this.canvas.height / this.dpr;\n    const rightImage = this.getCroppedImage(this.ctx, { x: width, y: 0 }, { x: width * 2, y: height });\n    this.ctx.clearRect(0, 0, width, height);\n    this.ctx.putImageData(rightImage, 0, 0)\n  }\n\n  public getCroppedImage(ctx: CanvasRenderingContext2D, lCoord: Coord, rCoord: Coord) {\n    return ctx.getImageData(lCoord.x, lCoord.y, rCoord.x, rCoord.y);\n  }\n\n  public getTextWidth(text: string | number) {\n    return this.context.measureText(`${text}`).width;\n  }\n\n  public getTextHeight(text: string | number) {\n    const metrics = this.context.measureText(`${text}`);\n    let fontHeight = metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent;\n    let actualHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;\n\n    return fontHeight;\n  }\n}"],"names":[],"sourceRoot":""}