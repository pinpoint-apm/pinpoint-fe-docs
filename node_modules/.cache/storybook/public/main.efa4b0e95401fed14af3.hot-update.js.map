{"version":3,"file":"main.efa4b0e95401fed14af3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAHA;AAZA;AAqBA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAlCA;AAuCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://@pinpoint-fe/scatter-chart/./src/stories/ScatterChartStory.ts"],"sourcesContent":["import { ScatterChart } from \"../ui\";\n\nconst newScatterChart = (wrapper: HTMLElement) => {\n  return new ScatterChart(wrapper, {\n    axis: {\n      x: {\n        min: 1671684304000,\n        max: 1671687904000,\n        tick: {\n          count: 5,\n          format: (value) => {\n            const date = new Date(value);\n            return `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\n          }, \n        }\n      },\n      y: {\n        min: 0,\n        max: 10000,\n        tick: {\n          count: 5,\n          format: (value) => value.toLocaleString(),\n        }\n      }\n    },\n    data: [\n      {\n        type: 'success',\n        color: 'green',\n        priority: 11,\n      },\n      {\n        type: 'fail',\n        color: 'red',\n        priority: 1,\n      },\n    ],\n    legend: {\n      formatLabel: (label) => label.toUpperCase(),\n      formatValue: (value) => value.toLocaleString(),\n    },\n  });\n}\n\nexport const createScatterChart = () => {\n  const wrapper = document.createElement('div');\n  setTimeout(() => {\n    newScatterChart(wrapper);\n  }, 500);\n  return wrapper;\n}\n\n\nexport const createScatterChartResizable = () => {\n  const wrapper = document.createElement('div');\n  const btnElement1 = document.createElement('button');\n  btnElement1.innerHTML = 'resize';\n  const btnElement2 = document.createElement('button');\n  btnElement2.innerHTML = 'resize 500 by 500';\n  \n  setTimeout(() => {\n    const SC = newScatterChart(wrapper);\n    wrapper.append(btnElement1);\n    wrapper.append(btnElement2);\n\n    btnElement1.addEventListener('click', () => {\n      SC.resize();\n    });\n\n    btnElement2.addEventListener('click', () => {\n      SC.resize(500, 500);\n    });\n\n  }, 500);\n  return wrapper;\n}\n\nexport const createScatterChartRealtime = () => {\n  const wrapper = document.createElement('div');\n  const inputElement = document.createElement('input');\n  inputElement.type = 'number';\n  inputElement.style.width = '100px';\n  const btnElement1 = document.createElement('button');\n  btnElement1.innerHTML = 'start';\n  const btnElement2 = document.createElement('button');\n  btnElement2.innerHTML = 'stop';\n  \n  setTimeout(() => {\n    const SC = newScatterChart(wrapper);\n    wrapper.append(inputElement);\n    wrapper.append(btnElement1);\n    wrapper.append(btnElement2);\n\n    btnElement1.addEventListener('click', () => {\n      SC.startRealtime(Number(inputElement.value));\n    });\n\n    btnElement2.addEventListener('click', () => {\n      SC.resize(500, 500);\n    });\n\n  }, 500);\n  return wrapper;\n} "],"names":[],"sourceRoot":""}