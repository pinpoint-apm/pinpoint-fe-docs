{"version":3,"file":"main.9665727b62237fc5f14d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AAMA;AAGA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;AAnBA;AAAA;AAAA;AAsBA;AACA;AAvBA;AAAA;AAAA;AA0BA;AACA;AA3BA;AAAA;AAAA;AA8BA;AACA;AA/BA;AAAA;AAAA;AAkCA;AACA;AAnCA;AAAA;AAAA;AAsCA;AACA;AAvCA;AAAA;AAAA;AAyCA;;AACA;AACA;AACA;;AAEA;AACA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AA9DA;AAAA;AAAA;AAiEA;AAAA;AAAA;AACA;AAlEA;AAAA;AAAA;AAqEA;AAAA;AAAA;AACA;AAtEA;AAAA;AAAA;AAyEA;AACA;AAIA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzFA;AAAA;AAAA;AA4FA;AACA;AACA;AA9FA;AAAA;AAAA;AAiGA;AACA;AACA;AACA;AACA;AArGA;AAAA;AAAA;AAwGA;AACA;AAzGA;;AAAA;AAAA","sources":["webpack://@pinpoint-fe/scatter-chart/./src/ui/Viewport.ts"],"sourcesContent":["import { Layer } from \"./Layer\";\n\nexport interface ViewportOption {\n  width: number;\n  height: number;\n}\n\nexport class Viewport {\n  private view: Layer;\n  private layers: Layer[];\n  private width: number;\n  private height: number;\n  \n  constructor(wrapper: HTMLElement, {\n    width = 0,\n    height = 0,\n  }) {\n    this.width = width;\n    this.height = height;\n    this.layers = [];\n    this.view = new Layer({\n      width, \n      height,\n    });\n    this.view.canvas.style.display = 'block';\n    wrapper.append(this.view.canvas);\n  }\n\n  get viewLayer() {\n    return this.view;\n  }\n\n  get canvas() {\n    return this.view.canvas;\n  }\n\n  get context() {\n    return this.view.context;\n  }\n\n  get styleWidth() {\n    return this.width;\n  }\n\n  get styleHeight() {\n    return this.height;  \n  }\n\n  public render(x: number, y: number) {\n    this.layers.forEach(layer => {\n      const layerCanvas = layer.canvas;\n      const dpr = layer.dpr;\n      \n      if (layer.isDisplay) {\n        if (layer.isFixed) {\n          this.view.context.drawImage(\n            layerCanvas, \n            0, 0, layerCanvas.width, layerCanvas.height, \n            0, 0, layerCanvas.width / dpr, layerCanvas.height / dpr\n          );\n        } else {\n          this.view.context.drawImage(\n            layerCanvas, \n            -x * dpr, y * dpr, layerCanvas.width, layerCanvas.height,\n            0, y, layerCanvas.width / dpr, layerCanvas.height / dpr\n          );\n        }\n      } \n    })\n  }\n\n  public hideLayer(id: string) {\n    this.layers.filter(layer => layer.id === id)[0].hide();\n  }\n\n  public showLayer(id: string) {\n    this.layers.filter(layer => layer.id === id)[0].show();\n  }\n\n  public addLayer(layer: Layer | Layer[]) {\n    if (Array.isArray(layer)) {\n      this.layers = [\n        ...this.layers,\n        ...layer,\n      ];\n    } else {\n      this.layers.push(layer);\n    }\n    this.layers.sort((a, b) => {\n      if (a.priority > b.priority) {\n        return -1;\n      } else \n        return 1;\n    })\n    console.log(this.layers);\n    return this;\n  }\n\n  public setSize(width: number, height: number) {\n    this.view.setSize(width, height);\n    return this;\n  } \n\n  public setLayersSize(width: number, height: number) {\n    this.layers.forEach(layer => {\n      layer.setSize(width, height);\n    });\n    return this;\n  }\n\n  public clear() {\n    this.view.context.clearRect(0, 0, this.view.canvas.width, this.view.canvas.height);\n  }\n}"],"names":[],"sourceRoot":""}