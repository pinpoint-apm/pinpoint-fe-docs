{"version":3,"file":"main.ba373be0f47d87e0fe64.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASA;AAWA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBA;AAAA;AAAA;AAsBA;AACA;AAvBA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AApCA;AAAA;AAAA;AAsCA;;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AA7EA;AAAA;AAAA;AA+EA;;AACA;AACA;AAEA;AACA;AApFA;;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@pinpoint-fe/scatter-chart/./src/ui/Legend.ts"],"sourcesContent":["import { SCATTER_CHART_IDENTIFIER } from \"../constants/ui\";\nimport { LegendOption } from \"../types\";\n\nexport type LegendProps = { \n  types: string[], \n  legendOptions: LegendOption, \n  dataColorMap: {[key: string]: string},\n  width?: number;\n}\nexport class Legend {\n  static LEGEND_CLASS = `${SCATTER_CHART_IDENTIFIER}legend`;\n  static MARK_CLASS = `${Legend.LEGEND_CLASS}_mark`;\n  static COUNT_CLASS = `${Legend.LEGEND_CLASS}_count`;\n  private rootWrapper;\n  private types;\n  private options;\n  private dataColorMap;\n  private containerElement: HTMLElement;\n  private legendElements: {[key: string]: HTMLDivElement} = {} \n  \n  constructor(rootWrapper: HTMLElement, { types, legendOptions, dataColorMap, width }: LegendProps) {\n    this.rootWrapper = rootWrapper;\n    this.types = types;\n    this.options = legendOptions;\n    this.dataColorMap = dataColorMap;\n    this.containerElement = document.createElement('div');\n    this.containerElement.className = `${SCATTER_CHART_IDENTIFIER}legend_container`;\n    this.setSize(width);\n  }\n  \n  public setSize(width?: number) {\n    this.containerElement.style.width = `${width}` || `${this.rootWrapper.clientWidth}`;\n  }\n\n  public addEvents(callback?: ({ type, checked }: { type: string, checked: boolean}) => void) {\n    this.containerElement.addEventListener('click', (event) => {\n      const isInputNode = event.target.nodeName === 'INPUT';\n      const wrapper = event.target.closest('div');\n      const checkbox = wrapper.querySelector('input');\n\n      if (isInputNode) {\n        callback?.({ type: wrapper.dataset.name, checked: checkbox.checked });\n      }\n    });\n    return this;\n  }\n\n  public render() {\n    const options = this.options;\n    const dataTypes = this.types;\n\n    dataTypes.forEach(type => {\n      // wrapper div\n      const legendWrapper = document.createElement('div');\n      legendWrapper.dataset.name = type;\n      legendWrapper.className = `${Legend.LEGEND_CLASS} ${type}`;\n\n      // mark\n      const markElement = document.createElement('span');\n      markElement.style.background = this.dataColorMap[type];\n      // const formattedLabel = options?.formatLabel?.(type) || type;\n      markElement.className = Legend.MARK_CLASS;\n\n      // count span\n      const countElement = document.createElement('span');\n      countElement.className = Legend.COUNT_CLASS;\n\n      // label\n      const labelElement = document.createElement('label');\n      const formattedLabel = options?.formatLabel?.(type) || type;\n      labelElement.htmlFor = `${Legend.LEGEND_CLASS}_${type}_input`;\n      labelElement.append(`${formattedLabel}`, countElement);\n\n\n      // input\n      const inputElement = document.createElement('input');\n      inputElement.id = `${Legend.LEGEND_CLASS}_${type}_input`;\n      inputElement.type = 'checkbox';\n      inputElement.checked = true;\n\n      this.legendElements[type] = legendWrapper;\n\n      legendWrapper.append(markElement, labelElement, inputElement);\n      this.containerElement.append(legendWrapper);\n    })\n    this.rootWrapper.append(this.containerElement);\n  }\n\n  public setLegendCount(type: string, value: number) {\n    const legendElement = this.legendElements[type];\n    const countElement = legendElement.getElementsByClassName(Legend.COUNT_CLASS)[0];\n\n    countElement.innerHTML = `${this.options.formatValue?.(value)}`;\n  }\n}"],"names":[],"sourceRoot":""}