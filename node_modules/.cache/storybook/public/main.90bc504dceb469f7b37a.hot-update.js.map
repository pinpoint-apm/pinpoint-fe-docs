{"version":3,"file":"main.90bc504dceb469f7b37a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAKA;AAEA;AAAA;;AAAA;;AAIA;AAIA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACA;AADA;AAAA;AAEA;AACA;;AACA;;AAJA;AAKA;;AAbA;AAAA;AAAA;AAeA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA/BA;AAAA;AAAA;AAiCA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAjDA;AAAA;AAAA;AAoDA;AACA;AACA;AACA;AAvDA;AAAA;AAAA;AA0DA;;AACA;AACA;AACA;AA7DA;AAAA;AAAA;AAgEA;AACA;AACA;AAlEA;AAAA;AAAA;AAqEA;AACA;AACA;AAvEA;;AAAA;AAAA","sources":["webpack://@pinpoint-fe/scatter-chart/./src/ui/GridAxis.ts"],"sourcesContent":["import { AXIS_DEFAULT_TICK_COUNT, AXIS_INNER_PADDING, AXIS_TICK_LENGTH } from \"../constants/ui\";\nimport { drawLine, drawText } from \"../utils/draw\";\nimport { Axis, AxisProps } from \"./Axis\";\n\nexport interface GridAxisProps extends AxisProps {\n  xTickCount?: number;\n  yTickCount?: number;\n};\n\nexport class GridAxis extends Axis {\n  xTickCount;\n  yTickCount;\n\n  constructor({\n    xTickCount,\n    yTickCount,\n    ...props\n  }: GridAxisProps = {}) {\n    super(props);\n    this.xTickCount = xTickCount || AXIS_DEFAULT_TICK_COUNT;\n    this.yTickCount = yTickCount || AXIS_DEFAULT_TICK_COUNT;\n    this.render();\n  }\n\n  private renderXGrid() {\n    const tickCount = this.xTickCount;\n    const padding = this.padding;\n    const width = this.canvas.width / this.dpr;\n    const height = this.canvas.height / this.dpr;\n\n    const startX = padding.left + AXIS_INNER_PADDING;\n    const startY = padding.top;\n    const endX = width - padding.right - AXIS_INNER_PADDING;\n    const endY = height - padding.bottom; \n    const wGap = (endX - startX) / (tickCount - 1);\n\n    [...Array(tickCount)].forEach((_ , i) => {\n      const x = wGap * i + startX;\n      drawLine(this.context, x, startY, x, endY + AXIS_TICK_LENGTH, { color: '#d1d1d1'});\n    })\n  }\n\n  private renderYGrid() {\n    const tickCount = this.yTickCount;\n    const padding = this.padding;\n    const width = this.canvas.width / this.dpr;\n    const height = this.canvas.height / this.dpr;\n    \n    const startX = padding.left;\n    const startY = padding.top + AXIS_INNER_PADDING;\n    const endX = width - padding.right + AXIS_INNER_PADDING;\n    const endY = height - padding.bottom - AXIS_INNER_PADDING;\n    const hGap = (endY - startY) / (tickCount - 1);\n\n    [...Array(tickCount)].forEach((_, i) => {\n      const y = hGap * i + startY;\n      drawLine(this.context, startX - AXIS_TICK_LENGTH, y, endX, y, { color: '#d1d1d1'});\n    })\n  }\n\n  public render() {\n    this.clear();\n    this.renderXGrid();\n    this.renderYGrid();    \n  }\n  \n  public setSize(width: number, height: number){\n    super.setSize(width, height);\n    this.render();\n    return this;\n  }\n\n  public setXTickCount(tick: number) {\n    this.xTickCount = tick;\n    return this;\n  }\n\n  public setYickCount(tick: number) {\n    this.yTickCount = tick;\n    return this;\n  }\n}"],"names":[],"sourceRoot":""}