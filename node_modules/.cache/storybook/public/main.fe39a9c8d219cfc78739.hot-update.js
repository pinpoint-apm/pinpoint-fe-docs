"use strict";
self["webpackHotUpdate_pinpoint_fe_scatter_chart"]("main",{

/***/ "./src/ui/Layer.ts":
/*!*************************!*\
  !*** ./src/ui/Layer.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Layer": () => (/* binding */ Layer)
/* harmony export */ });
/* harmony import */ var _Users_dy_dy_projects_pinpoint_web_src_main_web_frontend_node_modules_core_js_modules_es_string_fixed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.string.fixed.js */ "../../node_modules/core-js/modules/es.string.fixed.js");
/* harmony import */ var _Users_dy_dy_projects_pinpoint_web_src_main_web_frontend_node_modules_core_js_modules_es_string_fixed_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_dy_dy_projects_pinpoint_web_src_main_web_frontend_node_modules_core_js_modules_es_string_fixed_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_dy_dy_projects_pinpoint_web_src_main_web_frontend_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.object.define-property.js */ "../../node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var _Users_dy_dy_projects_pinpoint_web_src_main_web_frontend_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_dy_dy_projects_pinpoint_web_src_main_web_frontend_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _constants_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/ui */ "./src/constants/ui.ts");
/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/helper */ "./src/utils/helper.ts");



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var Layer = /*#__PURE__*/function () {
  function Layer() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$width = _ref.width,
        width = _ref$width === void 0 ? 0 : _ref$width,
        _ref$height = _ref.height,
        height = _ref$height === void 0 ? 0 : _ref$height,
        _ref$display = _ref.display,
        display = _ref$display === void 0 ? true : _ref$display,
        _ref$fixed = _ref.fixed,
        fixed = _ref$fixed === void 0 ? false : _ref$fixed,
        _ref$priority = _ref.priority,
        priority = _ref$priority === void 0 ? _constants_ui__WEBPACK_IMPORTED_MODULE_2__.LAYER_DEFAULT_PRIORITY : _ref$priority;

    _classCallCheck(this, Layer);

    this.cvs = void 0;
    this.ctx = void 0;
    this.identifier = '';
    this.display = void 0;
    this.fixed = void 0;
    this.priorityOrder = void 0;
    this.displayPixcelRatio = void 0;
    this.displayPixcelRatio = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getDevicePicelRatio)();
    this.display = display;
    this.fixed = fixed;
    this.priorityOrder = priority;
    this.cvs = document.createElement('canvas');
    this.ctx = this.cvs.getContext('2d');
    this.cvs.style.width = width + "px";
    this.cvs.style.height = height + "px";
    this.cvs.width = width * this.dpr;
    this.cvs.height = height * this.dpr;
    this.ctx.scale(this.dpr, this.dpr);
  }

  _createClass(Layer, [{
    key: "setSize",
    value: function setSize(width, height) {
      this.clear();
      this.cvs.style.width = width + "px";
      this.cvs.style.height = height + "px";
      this.cvs.width = width * this.dpr;
      this.cvs.height = height * this.dpr;
      this.ctx.scale(this.dpr, this.dpr);
    }
  }, {
    key: "show",
    value: function show() {
      this.display = true;
    }
  }, {
    key: "hide",
    value: function hide() {
      this.display = false;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
  }, {
    key: "dpr",
    get: function get() {
      return this.displayPixcelRatio;
    }
  }, {
    key: "priority",
    get: function get() {
      return this.priorityOrder;
    },
    set: function set(priority) {
      this.priorityOrder = priority;
    }
  }, {
    key: "id",
    get: function get() {
      return this.identifier;
    },
    set: function set(id) {
      this.identifier = id;
    }
  }, {
    key: "isFixed",
    get: function get() {
      return this.fixed;
    },
    set: function set(fixed) {
      this.fixed = fixed;
    }
  }, {
    key: "canvas",
    get: function get() {
      return this.cvs;
    }
  }, {
    key: "context",
    get: function get() {
      return this.ctx;
    }
  }, {
    key: "isDisplay",
    get: function get() {
      return this.display;
    }
  }, {
    key: "swapCanvasImage",
    value: function swapCanvasImage() {
      var width = this.canvas.width / this.dpr;
      var height = this.canvas.height / this.dpr;
      var rightImage = this.getCroppedImage(this.ctx, {
        x: width,
        y: 0
      }, {
        x: width * 2,
        y: height
      });
      this.ctx.clearRect(0, 0, width, height);
      this.ctx.putImageData(rightImage, 0, 0);
    }
  }, {
    key: "getCroppedImage",
    value: function getCroppedImage(ctx, lCoord, rCoord) {
      return ctx.getImageData(lCoord.x, lCoord.y, rCoord.x, rCoord.y);
    }
  }, {
    key: "getTextWidth",
    value: function getTextWidth(text) {
      return this.context.measureText("" + text).width;
    }
  }, {
    key: "getTextHeight",
    value: function getTextHeight(text) {
      var metrics = this.context.measureText("" + text);
      var fontHeight = metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent;
      var actualHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
      return fontHeight;
    }
  }]);

  return Layer;
}();

/***/ })

});
//# sourceMappingURL=main.fe39a9c8d219cfc78739.hot-update.js.map